[
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Submit",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-09-30 11:42:11.002343",
  "module": null,
  "name": "Trigger Mail For Supplier When RFQ getting Created",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Request for Quotation",
  "script": "if doc.doctype == \"Request for Quotation\":\n    for supplier_row in doc.suppliers:\n        supplier_info = frappe.db.get_value(\n            \"Supplier\", supplier_row.supplier,\n            [\"email_id\", \"supplier_name\"], as_dict=True\n        )\n        if not supplier_info:\n            continue\n\n        supplier_email = supplier_info.email_id\n        supplier_name = supplier_info.supplier_name or supplier_row.supplier\n\n        if supplier_email:\n            # try to get existing user\n            user = frappe.db.get_value(\"User\", {\"email\": supplier_email}, [\"name\"], as_dict=True)\n\n            if not user:\n                # create new user\n                site_url = frappe.utils.get_url()\n                user_doc = frappe.get_doc({\n                    \"doctype\": \"User\",\n                    \"send_welcome_email\": 0,\n                    \"email\": supplier_email,\n                    \"first_name\": supplier_name,\n                    \"user_type\": \"Website User\",\n                    \"redirect_url\": site_url + \"/login\",\n                    \"roles\": [{\"role\": \"Supplier\"}]  # assign Supplier role on creation\n                })\n                user_doc.insert(ignore_permissions=True)\n            else:\n                # existing user\n                user_doc = frappe.get_doc(\"User\", user.name)\n                # check if user has Supplier role\n                has_supplier_role = any(role.role == \"Supplier\" for role in user_doc.roles)\n                if not has_supplier_role:\n                    user_doc.append(\"roles\", {\"role\": \"Supplier\"})\n                    user_doc.save(ignore_permissions=True)\n\n            site_url = frappe.utils.get_url()  # http://localhost:8000\n\n            # generate reset link but don't send default email\n            reset_password_link = user_doc.reset_password(send_email=False)\n            # fix the link to use correct site URL\n            reset_password_link = reset_password_link.replace(frappe.utils.get_url(\"/\"), site_url + \"/\")\n            # generate password reset link every time\n            username = user_doc.email\n            password_info = f'Please set your password using this link: <a href=\"{reset_password_link}\">{reset_password_link}</a>'\n\n\n            login_link = frappe.utils.get_url(\"/login\")\n\n            subject = f\"New RFQ Created: {doc.name}\"\n            message = f\"\"\"\n            <p>Dear {supplier_name},</p>\n            <p>A new Request for Quotation <b>{doc.name}</b> has been created and assigned to you.</p>\n            <p>Please review it at your earliest convenience.</p>\n            <br>\n            <p><b>Login Details:</b><br>\n            Username: {username}<br>\n            {password_info}\n            Login here: <a href=\"{login_link}\">{login_link}</a>\n            </p>\n            <br>\n            <p>Best regards,<br>Excellminds</p>\n            \"\"\"\n\n            frappe.sendmail(\n                recipients=[supplier_email],\n                subject=subject,\n                message=message\n            )\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 1,
  "api_method": "rfq_suppliers_api",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-10-04 18:24:29.935401",
  "module": null,
  "name": "Supplier filtered records",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": null,
  "script": "# Name: rfq_suppliers_api\n# Type: API\n\ndef rfq_suppliers_api(supplier_group):\n    suppliers = frappe.get_all(\n        \"Supplier\",\n        filters={\"supplier_group\": supplier_group},\n        fields=[\"name\", \"supplier_name\"]\n    )\n\n    # Server Scripts automatically return as r.message\n    # return suppliers\n    return {\"message\": suppliers}\n    \ngroup = frappe.form_dict.get(\"supplier_group\",\"\")\n\nrfq_suppliers_api(group)",
  "script_type": "API"
 },
 {
  "allow_guest": 1,
  "api_method": "get_suppliers_by_item",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-10-04 17:48:15.022666",
  "module": null,
  "name": "Get Supplier list as per item filter",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": null,
  "script": "# Name: get_suppliers_by_item\n# Type: API\n\ndef get_suppliers_by_item(item):\n    print(\"item .....\")\n    \"\"\"\n    Get all suppliers linked to a given Item.\n    \"\"\"\n    suppliers = frappe.db.sql(\"\"\"\n        SELECT supplier \n        FROM `tabItem Supplier`\n        WHERE parent = %s\n    \"\"\", item, as_dict=True)\n    print(\"suppliers .....\",suppliers)\n\n    return suppliers\n\n    \nitems = frappe.form_dict.get(\"item\",\"\")\n\nget_suppliers_by_item(items)",
  "script_type": "API"
 }
]