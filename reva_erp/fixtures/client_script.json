[
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Order",
  "enabled": 1,
  "modified": "2025-09-24 18:14:47.664870",
  "module": "Buying",
  "name": "Purchase Order Approved Suplier Disply in Supplier",
  "script": "\nfrappe.ui.form.on(\"Purchase Order\", {\n    onload_post_render: function(frm) {\n        frm.set_query(\"supplier\", {\n            filters: {\n                workflow_state: 'Approved'\n            }\n        });\n    }\n});\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Task",
  "enabled": 1,
  "modified": "2025-10-14 12:26:57.317312",
  "module": null,
  "name": "Check work flow of task",
  "script": "frappe.ui.form.on('Task', {\n    refresh: function (frm) {\n        // If Task is Approved or Pending → make form read-only\n        if (frm.doc.workflow_state === \"Approved\" || frm.doc.workflow_state === \"Pending\") {\n            frm.disable_form(true);\n        }\n    },\n\n    before_workflow_action: function(frm) {\n        // Check if workflow action is moving to Pending\n        if (frm.doc.workflow_state === 'Draft') {\n            if (frm.doc.status !== \"Completed\") {\n                frappe.throw(\"Status should be Completed before moving to Pending.\");\n            }\n        }\n    },\n\n    // after_save: function(frm) {\n    //     console.log(\"frm.doc.status ...\",frm.doc.status)\n    //     // ✅ Case 1: Task newly created & status = Working → create Timesheet\n    //     if (frm.doc.status === \"Working\") {\n    //         console.log(\"in workingb....\")\n    //         frappe.call({\n    //             method: \"frappe.client.insert\",\n    //             args: {\n    //                 doc: {\n    //                     doctype: \"Timesheet\",\n    //                     employee: frm.doc.custom_assigned_to,   // map to employee field if you have one\n    //                     start_date: frappe.datetime.nowdate(),\n    //                     time_logs: [\n    //                         {\n    //                             activity_type: \"Task Work\", // must exist in your system\n    //                             from_time: frappe.datetime.now_datetime(),\n    //                             task: frm.doc.name\n    //                         }\n    //                     ]\n    //                 }\n    //             },\n    //             callback: function(r) {\n    //                 if (!r.exc) {\n    //                     let timesheet = r.message;\n    //                     console.log(\"timesheet ...\",timesheet)\n                        \n    //                     frappe.msgprint(__(\"Timesheet created for this Task\"));\n    //                     // save Timesheet ID back to Task (custom field needed!)\n    //                     frappe.call({\n    //                         method: \"frappe.client.set_value\",\n    //                         args: {\n    //                             doctype: \"Task\",\n    //                             name: frm.doc.name,\n    //                             fieldname: \"linked_timesheet\",\n    //                             value: timesheet.name\n    //                         }\n    //                     });\n    //                 }\n    //             }\n    //         });\n    //     }\n\n    //     // ✅ Case 2: Task status changed to Completed → update Timesheet\n    //     if (!frm.is_new() && frm.doc.status === \"Completed\" && frm.doc.linked_timesheet) {\n    //         frappe.call({\n    //             method: \"frappe.client.get\",\n    //             args: {\n    //                 doctype: \"Timesheet\",\n    //                 name: frm.doc.linked_timesheet\n    //             },\n    //             callback: function(r) {\n    //                 if (!r.exc) {\n    //                     let timesheet = r.message;\n    //                     if (timesheet.time_logs && timesheet.time_logs.length > 0) {\n    //                         let log = timesheet.time_logs[0]; // assuming 1:1 Task ↔ Timesheet\n    //                         log.to_time = frappe.datetime.now_datetime();\n\n    //                         frappe.call({\n    //                             method: \"frappe.client.save\",\n    //                             args: {\n    //                                 doc: timesheet\n    //                             },\n    //                             callback: function() {\n    //                                 frappe.msgprint(__(\"Stop time added to Timesheet for this Task\"));\n    //                             }\n    //                         });\n    //                     }\n    //                 }\n    //             }\n    //         });\n    //     }\n    // }\n    \n    \n    \n    after_save: function(frm) {\n        console.log(\"frm.doc.status ...\", frm.doc.status,' .... ',frm.doc.linked_timesheet);\n\n        // ✅ Case: Create Timesheet when Task status = Working\n        if (frm.doc.status === \"Working\") {\n            console.log(\"Task is Working... Checking assigned employees\");\n\n            // Get logged-in user’s employee record\n            frappe.call({\n                method: \"frappe.client.get_list\",\n                args: {\n                    doctype: \"Employee\",\n                    filters: { user_id: frappe.session.user },\n                    fields: [\"name\"]\n                },\n                callback: function(res) {\n                    if (!res.message || res.message.length === 0) {\n                        console.log(\"No Employee linked to this user\");\n                        return;\n                    }\n\n                    let logged_in_employee = res.message[0].name;\n                    console.log(\"Logged in employee:\", logged_in_employee);\n\n                    // Check if logged-in employee is in custom_assigned_to table\n                    let assigned_employees = (frm.doc.custom_assigned_to || []).map(row => row.employee);\n                    console.log(\"Assigned employees:\", assigned_employees);\n\n                    if (!assigned_employees.includes(logged_in_employee)) {\n                        console.log(\"Logged-in employee not assigned to this Task\");\n                        return;\n                    }\n\n                    // ✅ Employee is assigned → Create Timesheet\n                    frappe.call({\n                        method: \"frappe.client.insert\",\n                        args: {\n                            doc: {\n                                doctype: \"Timesheet\",\n                                employee: logged_in_employee,\n                                start_date: frappe.datetime.nowdate(),\n                                time_logs: [\n                                    {\n                                        activity_type: \"Task Work\",  // Must exist in your system\n                                        from_time: frappe.datetime.now_datetime(),\n                                        task: frm.doc.name\n                                    }\n                                ]\n                            }\n                        },\n                        callback: function(r) {\n                            if (!r.exc) {\n                                let timesheet = r.message;\n                                frappe.msgprint(__(\"Timesheet created for this Task\"));\n\n                                // ✅ Save Timesheet ID back to Task\n                                frappe.call({\n                                    method: \"frappe.client.set_value\",\n                                    args: {\n                                        doctype: \"Task\",\n                                        name: frm.doc.name,\n                                        fieldname: \"linked_timesheet\",\n                                        value: timesheet.name\n                                    }\n                                });\n                            }\n                        }\n                    });\n                }\n            });\n        }\n        \n        if (frm.doc.status === \"Completed\") {\n            let now = frappe.datetime.now_datetime();\n        \n            // Get all Timesheets (only parent fields first)\n            frappe.call({\n                method: \"frappe.client.get_list\",\n                args: {\n                    doctype: \"Timesheet\",\n                    filters: [],\n                    fields: [\"name\"],  // only fetch name here\n                },\n                callback: function(ts_list) {\n                    ts_list.message.forEach(ts => {\n                        // Fetch full Timesheet including child table\n                        frappe.call({\n                            method: \"frappe.client.get\",\n                            args: {\n                                doctype: \"Timesheet\",\n                                name: ts.name\n                            },\n                            callback: function(ts_full) {\n                                let timesheet = ts_full.message;\n                                if (!timesheet.time_logs) return;\n        \n                                let updated = false;\n        \n                                timesheet.time_logs.forEach(log => {\n                                    if (log.task === frm.doc.name) {\n                                        log.to_time = now;\n                                        log.completed = true;\n        \n                                        if (log.from_time && log.to_time) {\n                                            let from_dt = frappe.datetime.str_to_obj(log.from_time);\n                                            let to_dt = frappe.datetime.str_to_obj(log.to_time);\n        \n                                            let diff_ms = to_dt - from_dt;\n                                            let diff_hours = diff_ms / (1000 * 60 * 60);\n                                            log.hours = diff_hours.toFixed(2);\n                                        }\n        \n                                        updated = true;\n                                    }\n                                });\n        \n                                if (updated) {\n                                    frappe.call({\n                                        method: \"frappe.client.save\",\n                                        args: { doc: timesheet },\n                                        callback: function() {\n                                            frappe.msgprint(__(\"Stop time updated in Timesheet for Task \" + frm.doc.name));\n                                        }\n                                    });\n                                }\n                            }\n                        });\n                    });\n                }\n            });\n        }\n\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Request for Quotation",
  "enabled": 1,
  "modified": "2025-10-06 12:25:11.028858",
  "module": null,
  "name": "Add supplier group and item filter in RFQ",
  "script": "frappe.ui.form.on('Request for Quotation', {\n    refresh: function (frm, cdt, cdn){\n        if (frm.doc.docstatus === 1) {\n\t\t\tfrm.add_custom_button(__('Update After Submit'), function() {\n\t\t\t\tfrappe.call({\n\t\t\t\t\tmethod: \"unlock_rfq_after_submit\",\n\t\t\t\t\targs: { rfq_name: frm.doc.name },\n\t\t\t\t\tcallback: function(r) {\n\t\t\t\t\t\tif (!r.exc) {\n\t\t\t\t\t\t\t// Mark document as draft again (docstatus=0)\n\t\t\t\t\t\t\tfrm.doc.docstatus = 0;\n\t\t\t\t\t\t\tfrm.reload_doc();\n\n\t\t\t\t\t\t\tfrappe.msgprint(\"Form unlocked for editing.\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t}\n    },\n    \n    custom_supplier_group: function(frm) {\n        if (frm.doc.custom_supplier_group) {\n            frappe.call({\n                method: \"rfq_suppliers_api\", // ← use Server Script name\n                args: { supplier_group: frm.doc.custom_supplier_group },\n                callback: function(r) {\n                    if (r.message) {\n                        let has_records = frm.doc.suppliers && frm.doc.suppliers.length > 0;\n                        let only_blank_row =\n                            has_records && frm.doc.suppliers.length === 1 && !frm.doc.suppliers[0].supplier;\n\n                        if (has_records && !only_blank_row) {\n                            frappe.confirm(\n                                \"This will remove existing suppliers. Do you want to continue?\",\n                                function() {\n                                    frm.clear_table(\"suppliers\");\n                                    r.message.forEach(function(supp) {\n                                        let row = frm.add_child(\"suppliers\");\n                                        row.supplier = supp.name;\n                                    });\n                                    frm.refresh_field(\"suppliers\");\n                                }\n                            );\n                        } else {\n                            console.log('r.message ...',r.message)\n                            frm.clear_table(\"suppliers\");\n                            r.message.forEach(function(supp) {\n                                let row = frm.add_child(\"suppliers\");\n                                \n                                row.supplier = supp.name;\n                            });\n                            frm.refresh_field(\"suppliers\");\n                        }\n                    }\n                }\n            });\n        }\n    },\n    \n    custom_item: function(frm) {\n        if (frm.doc.custom_item) {\n            frappe.call({\n                method: \"get_suppliers_by_item\",\n                args: {\n                    item: frm.doc.custom_item\n                },\n                callback: function(r) {\n                    if (r.message) {\n                        console.log(\"in vsjdk ....\",r.message)\n                        r.message.forEach(supplier => {\n                            let has_records = frm.doc.suppliers && frm.doc.suppliers.length > 0;\n                            let only_blank_row = has_records && frm.doc.suppliers.length === 1 && !frm.doc.suppliers[0].supplier;\n        \n                            // Clear table only if there's a single blank row\n                            if (only_blank_row) {\n                                frm.clear_table(\"suppliers\");\n                            }\n                            // Avoid duplicates\n                            let exists = frm.doc.suppliers.some(s => s.supplier === supplier.supplier);\n                            if (!exists) {\n                                let child = frm.add_child(\"suppliers\");\n                                console.log('supplier ...',supplier.supplier)\n                                child.supplier = supplier.supplier;\n                            }\n                        });\n                        frm.refresh_field(\"suppliers\");\n                    }\n                }\n            });\n        }\n    },\n    \n    onload: function(frm) {\n        // Only populate if the table is empty\n        if (!frm.doc.custom_rfq_terms || frm.doc.custom_rfq_terms.length === 0) {\n            frappe.call({\n                method: \"frappe.client.get_list\",\n                args: {\n                    doctype: \"Terms and Conditions\",          // The Doctype linked in the child table field\n                    filters: { custom_is_default: 1 }, // Only default terms\n                    fields: [\"name\"]            // We only need the document name for a Link field\n                },\n                callback: function(r) {\n                    if (r.message) {\n                        frm.clear_table(\"custom_rfq_terms\");\n                        r.message.forEach(function(term) {\n                            let row = frm.add_child(\"custom_rfq_terms\");\n                            row.terms = term.name; // Set Link field to document name\n                        });\n                        frm.refresh_field(\"custom_rfq_terms\");\n                        \n                        // ✅ Call refresh_terms to update parent 'terms' field\n                        refresh_terms(frm);\n                    }\n                }\n            });\n        }\n    }\n});\n\n\nfrappe.ui.form.on('RFQ Terms Table', {\n\tterms: function(frm, cdt, cdn) {\n\t    console.log('nncnjcjdj...')\n        refresh_terms(frm);\n    },\n    add_multiple_terms_remove: function(frm, cdt, cdn) {\n        refresh_terms(frm);\n    }\n})\n\nfunction refresh_terms(frm) {\n    console.log(\"frm ...........vmweo\")\n    let combined_terms = \"\";\n    let rows = frm.doc.custom_rfq_terms || [];\n\n    if (!rows.length) {\n        frm.set_value(\"terms\", \"\");\n        return;\n    }\n\n    // Collect all term names first\n    let term_names = rows.map(row => row.terms).filter(Boolean);\n    term_names = term_names.filter((value, index, array) => array.indexOf(value) === index);\n    if (!term_names.length) {\n        frm.set_value(\"terms\", \"\");\n        return;\n    }\n\n    // Fetch all terms in one call (keeps sequence)\n    frappe.db.get_list(\"Terms and Conditions\", {\n        filters: { name: [\"in\", term_names] },\n        fields: [\"name\", \"title\", \"terms\"]\n    }).then(result => {\n        let count = 1;\n\n        // Loop rows in same sequence as child table\n        rows.forEach(row => {\n            let term = result.find(r => r.name === row.terms);\n            if (term) {\n                combined_terms += `<b>${count}. ${term.title}</b><br/>${term.terms}<br/><br/>`;\n                count++;\n            }\n        });\n\n        frm.set_value(\"terms\", combined_terms.trim());\n    });\n}\n\n",
  "view": "Form"
 }
]